#!/bin/bash -e

: <<=cut
=pod

=head1 NAME

ac-mount-all - Mounts and manages encrypted volumes by using keyfiles.

=head1 SYNOPSIS

ac-mount-all {start|stop|mount-keys|umount-keys|create-volume}

=head1 DESCRIPTION

Mounts a list of encrypted LVM volumes by using a disk stored keyfile and a
passphrase. Configuration is simple.

=head1 SETUP

=over 2

=item Install all the needed tools:

  apt-get install cryptsetup

=item Create a volume where to store all your keys:

  lvcreate -L 20M -n encrypted-keys system 

=item Encrypt the key volume:

  cryptsetup luksFormat /dev/system/encrypted-keys \
      --cipher=aes-cbc-essiv:sha256 --key-size=256 --verify-passphrase 

=item Format the new volume:
 
  cryptsetup luksOpen /dev/system/encrypted-keys cleartext-keys
  mkfs.ext4 /dev/mapper/cleartext-keys

=back

To create a new volume:
  $0 create-volume group name


=head1 COPYRIGHT

Copyright (C) 2006-2013 Carlo Contavalli, Andrea Ciancone, Fernando Vezzosi
  
=cut

cfg_fstab=${cfg_fstab-/opt/scripts/conf/ac-fstab}
cfg_key_mount=${cfg_key_mount-/mnt/keys}
cfg_key_volume=${cfg_key_volume-system/encrypted-keys}
cfg_attempts=5

function error() {
  script=$(readlink -f $(which $0))

  echo "$2" 1>&2
  echo "Use 'perldoc $script' for usage instructions." 1>&2
  exit $1
}

test -f "$cfg_fstab" || {
  error 3 "fstab $cfg_fstab does not exist!" 1>&2
}

test -b "/dev/$cfg_key_volume" || {
  error 3 "volume containing keys does not exist, /dev/$cfg_key_volume" 1>&2;
}

test -d "$cfg_key_mount" || {
  echo " + creating directory $cfg_key_mount, which does not exist."
  mkdir -p "$cfg_key_mount";
}

function create_volume() {
  volume_group=$1
  volume_name=$2
  
  test -n "$volume_group" || {
    echo "need to provide volume group name" 1>&2
    exit 4
  }
  test -n "$volume_name" || {
    echo "need to provide volume name" 1>&2
    exit 4
  }
  echo " + generating random key"
  dd iflag=fullblock if=/dev/urandom of=$cfg_key_mount/$volume_group-$volume_name.key bs=512 count=1

  cat <<EOF
To create volume, now run:

lvcreate -L <size> -n encrypted-$volume_name $volume_group
cryptsetup luksFormat /dev/$volume_group/encrypted-$volume_name \\
    --cipher=aes-cbc-essiv:sha256 --key-size=256 --key-file=$cfg_key_mount/$volume_group-$volume_name.key
cryptsetup luksOpen --key-file=$cfg_key_mount/$volume_group-$volume_name.key \\
     /dev/$volume_group/encrypted-$volume_name cleartext-$volume_name
mkfs.ext3 /dev/mapper/cleartext-$volume_name

REMEMBER TO LOCK THE KEYS AFTERWARD!
EOF
}

function protect_keys() {
  # Make sure keys are not mounted... when we exit :)
  trap 'umount "$cfg_key_mount" &>/dev/null && cryptsetup luksClose cleartext-keys &>/dev/null' EXIT
}

function umount_keys() {
  echo " + umounting keys"
  umount "$cfg_key_mount" || true
  echo " + removing keys"
  cryptsetup luksClose cleartext-keys
}

function mount_keys() {
  mountoptions=${1-ro}
  echo " + trying to mount keys."
  for attempt in `seq 1 $cfg_attempts`; do 
    cryptsetup luksOpen "/dev/$cfg_key_volume" cleartext-keys
    fsck -n /dev/mapper/cleartext-keys &>/dev/null || { 
      status="$?"; 
      test "$status" == "8" || break; 
      echo "wrong password? please try again..."
      cryptsetup luksClose cleartext-keys
      continue
    }
  
    status=0
    break
  done
  
  test "$status" == 0 || {
    echo "fsck -n /dev/mapper/cleartext-keys - failed ($status)! Please check partition manually" 1>&2
    echo "make sure to run cryptsetup luksClose cleartext-keys when you are done!" 1>&2
    exit 1
  }
  
  echo " + mounting keyfile"
  mount -o $mountoptions /dev/mapper/cleartext-keys "$cfg_key_mount" || {
    echo "mount failed! Please check /dev/mapper/cleartext-keys manually!" 1>&2
    exit 2
  }
}

function umount_volumes() {
  while read enc volume mount fs options; do
    case "$enc" in
      ""|\#*) continue;;
    esac

    options=${options-none}
  
    echo " + umounting /dev/mapper/cleartext-$enc - $fs - $mount"
    umount "$mount" || {
      echo "umount failed. Device in use? skipped."
      continue
    }
  done < "$cfg_fstab"

  while read enc volume mount; do
    case "$enc" in
      ""|\#*) continue;;
    esac

    echo "   + removing device mapper/cleartext-$enc"
    cryptsetup luksClose /dev/mapper/"cleartext-$enc" || {
      echo "cryptsetup luksClose /dev/mapper/cleartext-$enc -- failed!"
      continue
    }
  done < "$cfg_fstab"
}

function mount_volumes() {
  echo " + setting up crypt devices"
  while read enc volume mount; do
    case "$enc" in
      ""|\#*) continue;;
    esac

    test -f "$cfg_key_mount/$volume-$enc.key" || {
      echo "Skipping $cfg_key_mount/$volume-$enc.key - file does not exist"
      continue
    }
  
    test ! -b "/dev/mapper/cleartext-$enc" || {
      echo "  + device already decrypted, skipping mapper/cleartext-$enc"
      continue
    }
  
    echo "   + creating device mapper/cleartext-$enc"
    cryptsetup --key-file="$cfg_key_mount/$volume-$enc.key" luksOpen "/dev/$volume/encrypted-$enc" "cleartext-$enc" || {
      echo "cryptsetup --key-file=$cfg_key_mount/$volume-$enc.key luksOpen /dev/$volume/encrypted-$enc cleartext-$enc -- failed!"
      continue
    }
  done < "$cfg_fstab"
  
  umount_keys
  
  echo " + mounting devices"
  while read enc volume mount fs options; do
    case "$enc" in
      ""|\#*) continue;;
    esac

    options=${options-none}
  
    if mount |grep /dev/mapper/cleartext-$enc &>/dev/null; then
      echo "  + /dev/mapper/cleartext-$enc already mounted, skipping"
      continue
    fi
  
    test -b "/dev/mapper/cleartext-$enc" || {
      echo "something bad happened - device /dev/mapper/cleartext-$enc does not exist"
      exit 6
    }
  
    test -d "$mount" || {
      echo "mount point ($mount) for /dev/mapper/$enc does not exist - skipping"
      continue
    }
  
    echo " + fsck /dev/mapper/cleartext-$enc"
    fsck -p /dev/mapper/"cleartext-$enc" || { 
      echo "fsck on /dev/mapper/cleartext-$enc failed - please correct errors manually"
      continue
    }
  
    echo " + mounting /dev/mapper/cleartext-$enc - $fs - $mount"
    mount -o "$options" -t "$fs" /dev/mapper/"cleartext-$enc" "$mount" || {
      echo "mount of /dev/mapper/cleartext-$enc in $mount ($options - $fs) failed - please correct errors manually"
      continue
    }
  done < "$cfg_fstab"
}

case $1 in
  create-volume)
    umount_keys &> /dev/null || true
    mount_keys rw;
    shift;
    create_volume $@;
    ;;

  mount-keys)
    shift;
    mount_keys $@;
    ;;

  umount-keys)
    umount_keys;
    ;;

  start)
    umount_keys &> /dev/null || true
    protect_keys;
    mount_keys;
    mount_volumes;
    ;;

  stop)
    umount_keys &> /dev/null || true
    umount_volumes;
    ;;

  
  *)
    error 1 "unrecognized option $1, typo, maybe?"
    ;;
esac
